name: Build, Deploy and Release

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "package.json"
      - "tsconfig.json"
      - "tailwind.config.js"
      - "rollup.config.js"
      - "postcss.config.cjs"
      - ".storybook/**"
      - "eslint.config.js"
      - "bunfig.toml"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/**"
      - "package.json"
      - "tsconfig.json"
      - "tailwind.config.js"
      - "rollup.config.js"
      - "postcss.config.cjs"
      - ".storybook/**"
      - "eslint.config.js"
      - "bunfig.toml"
      - ".github/workflows/**"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type check
        run: bun run typecheck

      - name: Lint
        run: bun run lint

      - name: Build library
        run: bun run build

      - name: Build Storybook
        run: bun run build-storybook

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            dist/
            storybook-static/

  deploy-storybook:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build Storybook
        run: bun run build-storybook

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./storybook-static"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish-npm:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build library
        run: bun run build

      - name: Check if version changed
        id: check
        run: |
          PACKAGE_VERSION=$(bun --print "require('./package.json').version")
          NPM_VERSION=$(npm view @sector.siit/mlz-components version 2>/dev/null || echo "0.0.0")
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT
          if [ "$PACKAGE_VERSION" != "$NPM_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js for NPM publish
        if: steps.check.outputs.version_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Publish to NPM
        if: steps.check.outputs.version_changed == 'true'
        run: |
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    needs: [build-and-test, publish-npm]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.publish-npm.result == 'success'

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Get package version
        id: version
        run: |
          VERSION=$(bun --print "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "package_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          echo "## 🚀 Changes in v${{ steps.version.outputs.package_version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### ✨ Features" >> RELEASE_NOTES.md
          echo "- Updated MLZ Components library" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 📦 Installation" >> RELEASE_NOTES.md
          echo "\`\`\`bash" >> RELEASE_NOTES.md
          echo "npm install @sector.siit/mlz-components@${{ steps.version.outputs.package_version }}" >> RELEASE_NOTES.md
          echo "\`\`\`" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 📚 Documentation" >> RELEASE_NOTES.md
          echo "- [Storybook Documentation](https://sector-siit.github.io/mlz-components/)" >> RELEASE_NOTES.md
          echo "- [NPM Package](https://www.npmjs.com/package/@sector.siit/mlz-components)" >> RELEASE_NOTES.md

      - name: Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
          git push origin ${{ steps.version.outputs.version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: "Release ${{ steps.version.outputs.version }}"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

  create-release-candidate:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Generate RC version
        id: rc_version
        run: |
          PACKAGE_VERSION=$(bun --print "require('./package.json').version")
          TIMESTAMP=$(date +%Y%m%d%H%M)
          RC_VERSION="v${PACKAGE_VERSION}-rc.${TIMESTAMP}"
          echo "rc_version=$RC_VERSION" >> $GITHUB_OUTPUT
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Build library
        run: bun run build

      - name: Build Storybook
        run: bun run build-storybook

      - name: Generate RC changelog
        run: |
          echo "## 🧪 Release Candidate ${{ steps.rc_version.outputs.rc_version }}" > RC_NOTES.md
          echo "" >> RC_NOTES.md
          echo "### ⚠️ This is a Release Candidate" >> RC_NOTES.md
          echo "This version is for testing purposes only. Not recommended for production use." >> RC_NOTES.md
          echo "" >> RC_NOTES.md
          echo "### 📦 Test Installation" >> RC_NOTES.md
          echo "\`\`\`bash" >> RC_NOTES.md
          echo "# Download the assets from this release and test locally" >> RC_NOTES.md
          echo "\`\`\`" >> RC_NOTES.md
          echo "" >> RC_NOTES.md
          echo "### 🔍 What's being tested" >> RC_NOTES.md
          echo "- Component library build" >> RC_NOTES.md
          echo "- Storybook documentation" >> RC_NOTES.md
          echo "- TypeScript definitions" >> RC_NOTES.md
          echo "" >> RC_NOTES.md
          echo "### 📚 Preview Documentation" >> RC_NOTES.md
          echo "Storybook build included in release assets for preview." >> RC_NOTES.md

      - name: Create RC Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.rc_version.outputs.rc_version }} -m "Release Candidate ${{ steps.rc_version.outputs.rc_version }}"
          git push origin ${{ steps.rc_version.outputs.rc_version }}

      - name: Create RC Release
        id: create_rc_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.rc_version.outputs.rc_version }}
          release_name: "🧪 Release Candidate ${{ steps.rc_version.outputs.rc_version }}"
          body_path: RC_NOTES.md
          draft: false
          prerelease: true

      - name: Create zip for dist
        run: |
          cd dist && zip -r ../mlz-components-dist-${{ steps.rc_version.outputs.rc_version }}.zip . && cd ..

      - name: Create zip for storybook
        run: |
          cd storybook-static && zip -r ../storybook-${{ steps.rc_version.outputs.rc_version }}.zip . && cd ..

      - name: Upload build artifacts to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_rc_release.outputs.upload_url }}
          asset_path: ./mlz-components-dist-${{ steps.rc_version.outputs.rc_version }}.zip
          asset_name: mlz-components-dist-${{ steps.rc_version.outputs.rc_version }}.zip
          asset_content_type: application/zip

      - name: Upload Storybook to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_rc_release.outputs.upload_url }}
          asset_path: ./storybook-${{ steps.rc_version.outputs.rc_version }}.zip
          asset_name: storybook-${{ steps.rc_version.outputs.rc_version }}.zip
          asset_content_type: application/zip
