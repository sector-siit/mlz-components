name: Semantic Release

on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        required: true
    outputs:
      released:
        description: "Whether a release was created"
        value: ${{ jobs.semantic-release.outputs.released }}
      version:
        description: "The version that was released"
        value: ${{ jobs.semantic-release.outputs.version }}
  push:
    branches:
      - main
      - develop

jobs:
  # Este job se ejecuta en paralelo con validate-commits desde ci-cd.yml
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    outputs:
      released: ${{ steps.semantic.outputs.released }}
      version: ${{ steps.semantic.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build library
        run: bun run build

      - name: Build Storybook
        run: |
          bun run build-storybook
          zip -r storybook-static.zip storybook-static/

      - name: Run Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          output=$(bun exec semantic-release 2>&1)
          echo "Semantic Release Output:"
          echo "$output"

          if echo "$output" | grep -q "Published release"; then
            version=$(echo "$output" | grep "Published release" | sed 's/.*Published release \([0-9]\+\.[0-9]\+\.[0-9]\+.*\) on.*/\1/')
            echo "released=true" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "‚úÖ Released version: $version"
          else
            echo "released=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No release created"
          fi

      - name: Deploy Storybook to GitHub Pages
        if: steps.semantic.outputs.released == 'true' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          destination_dir: .
          keep_files: false

      - name: Update Contributors
        if: steps.semantic.outputs.released == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'update-contributors.yml',
              ref: context.ref
            });

      - name: Generate Badges
        if: steps.semantic.outputs.released == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'generate-badges.yml',
              ref: context.ref
            });

  # Notificaci√≥n de release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.released == 'true'

    steps:
      - name: Create Release Notification
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.semantic-release.outputs.version }}';
            const isMain = '${{ github.ref }}' === 'refs/heads/main';
            const type = isMain ? 'Production Release' : 'Release Candidate';
            const emoji = isMain ? 'üöÄ' : 'üß™';

            console.log(`${emoji} ${type} ${version} has been published!`);

            // Aqu√≠ podr√≠as agregar notificaciones a Slack, Discord, etc.
            // Ejemplo para el futuro:
            // await github.rest.repos.createCommitComment({
            //   owner: context.repo.owner,
            //   repo: context.repo.repo,
            //   commit_sha: context.sha,
            //   body: `${emoji} ${type} \`${version}\` has been published!`
            // });
